generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DB_PRISMA_URL")
  directUrl = env("DB_URL_NON_POOLING")
}

model User {
  id             String           @id @default(cuid())
  email          String           @unique
  name           String?
  username       String           @unique
  password       String
  createdAt      DateTime         @default(now())
  updatedAt      DateTime         @updatedAt
  groups         Group[]
  userConfig     UserConfig?
  payers         Payers[]
  involved       Involved[]
  spending       Spending[]
  comment        Comment[]
  forgotPassword ForgotPassword[]
  notification   Notification[]
  userGroupRole  UserGroupRole[]
}

model UserConfig {
  id                  String  @id @default(cuid())
  userId              String  @unique
  user                User    @relation(fields: [userId], references: [id])
  inviteNotification  Boolean
  spentNotification   Boolean
  paymentNotification Boolean
  limit               Int
}

model Group {
  id            String          @id @default(cuid())
  name          String
  description   String?
  createdAt     DateTime        @default(now())
  updatedAt     DateTime        @updatedAt
  users         User[]
  spendings     Spending[]
  groupInvite   GroupInvite[]
  userGroupRole UserGroupRole[]
}

model Payers {
  id         String   @id @default(cuid())
  amount     Float
  payer      User     @relation(fields: [payerId], references: [id])
  payerId    String
  spending   Spending @relation(fields: [spendingId], references: [id])
  spendingId String
}

model Involved {
  id         String   @id @default(cuid())
  amount     Float
  involved   User     @relation(fields: [involvedId], references: [id])
  involvedId String
  spending   Spending @relation(fields: [spendingId], references: [id])
  spendingId String
  paid       Boolean
  forgiven   Boolean
}

model Spending {
  id          String     @id @default(cuid())
  name        String
  description String?
  value       Float
  currency    Currency   @relation(fields: [currencyId], references: [id])
  currencyId  String
  date        DateTime
  category    Category   @relation(fields: [categoryId], references: [id])
  categoryId  String
  paid        Boolean
  due         DateTime
  owner       User       @relation(fields: [ownerId], references: [id])
  ownerId     String
  group       Group      @relation(fields: [groupId], references: [id])
  groupId     String
  payers      Payers[]
  involved    Involved[]
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
  stoppedAt   DateTime?
  comments    Comment[]
}

model Comment {
  id         String   @id @default(cuid())
  content    String
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  user       User     @relation(fields: [userId], references: [id])
  userId     String
  spending   Spending @relation(fields: [spendingId], references: [id])
  spendingId String
}

model Category {
  id          String     @id @default(cuid())
  name        String
  description String?
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
  spending    Spending[]
}

model GroupInvite {
  id        String   @id @default(cuid())
  code      String   @unique
  group     Group    @relation(fields: [groupId], references: [id])
  groupId   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model ForgotPassword {
  id        String   @id @default(cuid())
  code      String   @unique
  user      User     @relation(fields: [userId], references: [id])
  userId    String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Notification {
  id        String   @id @default(cuid())
  user      User     @relation(fields: [userId], references: [id])
  userId    String
  type      String
  message   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

enum ROLE {
  ADMIN
  USER
}

model UserGroupRole {
  id        String   @id @default(cuid())
  role      ROLE
  user      User     @relation(fields: [userId], references: [id])
  userId    String
  group     Group    @relation(fields: [groupId], references: [id])
  groupId   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Currency {
  id        String     @id @default(cuid())
  name      String
  symbol    String
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
  spending  Spending[]
}
